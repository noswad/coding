//@version=5
strategy("綜合指標策略+ML (Indicator Combo Strategy + ML)",
     shorttitle="綜合策略+ML",
     overlay=true,
     initial_capital=100000,
     default_qty_type=strategy.percent_of_equity,
     default_qty_value=10, // 例如，每筆交易使用10%的資金
     commission_type=strategy.commission.percent,
     commission_value=0.1) // 例如，0.1% 的手續費

// ————— General Settings —————
group_general = "一般設定 (General Settings)"
src = input.source(close, "來源 (Source)", group = group_general)

// ————— Bollinger Bands (BB) —————
group_bb = "布林通道 (Bollinger Bands)"
show_bb_plot = input.bool(true, "繪製布林通道 (Plot Bollinger Bands)", group = group_bb, inline="bb1")
bb_len = input.int(20, "長度 (Length)", minval=1, group = group_bb, inline="bb2")
bb_mult = input.float(2.0, "標準差倍數 (StdDev Multiplier)", minval=0.001, maxval=50, group = group_bb, inline="bb2")

bb_basis = ta.sma(src, bb_len)
bb_dev = bb_mult * ta.stdev(src, bb_len)
bb_upper = bb_basis + bb_dev
bb_lower = bb_basis - bb_dev

plot(show_bb_plot ? bb_basis : na, "BB 中軌 (Basis)", color=color.new(color.blue, 0))
plot_bb_upper = plot(show_bb_plot ? bb_upper : na, "BB 上軌 (Upper)", color=color.new(color.gray, 50))
plot_bb_lower = plot(show_bb_plot ? bb_lower : na, "BB 下軌 (Lower)", color=color.new(color.gray, 50))
fill(plot_bb_upper, plot_bb_lower, color=color.new(color.gray, 90), title="BB 背景填充 (Fill)", display = show_bb_plot ? display.all : display.none)

// ————— Moving Average (MA) —————
group_ma = "移動平均線 (Moving Average)"
show_ma_plot = input.bool(true, "繪製移動平均線 (Plot MA)", group = group_ma, inline="ma1")
ma_type = input.string("SMA", "類型 (Type)", options=["SMA", "EMA", "WMA", "RMA", "VWMA"], group = group_ma, inline="ma2")
ma_len = input.int(50, "長度 (Length)", minval=1, group = group_ma, inline="ma2")

f_ma(source, length, type) =>
    float result = na
    if type == "SMA"
        result := ta.sma(source, length)
    if type == "EMA"
        result := ta.ema(source, length)
    if type == "WMA"
        result := ta.wma(source, length)
    if type == "RMA"
        result := ta.rma(source, length)
    if type == "VWMA"
        result := ta.vwma(source, length)
    result

ma_val = f_ma(src, ma_len, ma_type)
plot(show_ma_plot ? ma_val : na, "MA", color=color.new(color.orange, 0))

// ————— Directional Movement Index (DMI) —————
group_dmi = "DMI (Directional Movement Index)"
dmi_len = input.int(14, "DI 長度 (DI Length)", minval=1, group = group_dmi, inline="dmi2")
adx_smooth = input.int(14, "ADX 平滑長度 (ADX Smoothing)", minval=1, group = group_dmi, inline="dmi2")

[di_plus, di_minus, adx_val] = ta.dmi(dmi_len, adx_smooth)

// ————— Stochastic (KD) —————
group_kd = "KD (Stochastic)"
kd_k_period = input.int(14, "%K 週期 (K Period)", minval=1, group = group_kd, inline="kd2") // Lookback period for High/Low
kd_k_smooth = input.int(3, "%K 平滑 (K Smoothing)", minval=1, group = group_kd, inline="kd3") // Smoothing for Slow %K
kd_d_period = input.int(3, "%D 平滑 (D Smoothing)", minval=1, group = group_kd, inline="kd3") // Smoothing for %D (Signal Line)

fast_k = ta.stoch(close, high, low, kd_k_period)
slow_k = ta.sma(fast_k, kd_k_smooth) // Slow %K
slow_d = ta.sma(slow_k, kd_d_period) // %D

// ————— Relative Strength Index (RSI) —————
group_rsi = "RSI (Relative Strength Index)"
rsi_len = input.int(14, "長度 (Length)", minval=1, group = group_rsi, inline="rsi2")

rsi_val = ta.rsi(src, rsi_len)

// ————— MACD (Moving Average Convergence Divergence) —————
group_macd = "MACD"
macd_fast_len = input.int(12, "快速EMA長度 (Fast Length)", minval=1, group = group_macd, inline="macd2")
macd_slow_len = input.int(26, "慢速EMA長度 (Slow Length)", minval=1, group = group_macd, inline="macd2")
macd_signal_len = input.int(9, "訊號線EMA長度 (Signal Length)", minval=1, group = group_macd, inline="macd3")

[macd_line, macd_signal_line, macd_hist] = ta.macd(src, macd_fast_len, macd_slow_len, macd_signal_len)

// ————— Strategy Settings —————
group_strategy = "策略設定 (Strategy Settings)"

// Trade Direction
trade_direction = input.string("多空都做", "交易方向 (Trade Direction)", options=["多空都做", "只做多", "只做空"], group = group_strategy, inline="s0_dir")

// Entry Logic Switches
use_ma_filter = input.bool(true, "使用 MA 趨勢過濾 (Use MA Trend Filter)", group = group_strategy, inline="s1_ma")
use_dmi_filter = input.bool(true, "使用 DMI 趨勢過濾 (Use DMI Trend Filter)", group = group_strategy, inline="s1_dmi")

use_rsi_entry = input.bool(true, "使用 RSI 進場 (Use RSI Entry)", group = group_strategy, inline="s2_rsi")
rsi_entry_ob = input.int(70, "RSI 進場超買水平 (RSI Entry Overbought)", group = group_strategy, minval=50, maxval=100, inline="s2_rsi_val")
rsi_entry_os = input.int(30, "RSI 進場超賣水平 (RSI Entry Oversold)", group = group_strategy, minval=0, maxval=50, inline="s2_rsi_val")

use_kd_entry = input.bool(false, "使用 KD 進場 (Use KD Entry)", group = group_strategy, inline="s3_kd")
kd_entry_ob = input.int(80, "KD 進場超買水平 (KD Entry Overbought)", group = group_strategy, minval=50, maxval=100, inline="s3_kd_val")
kd_entry_os = input.int(20, "KD 進場超賣水平 (KD Entry Oversold)", group = group_strategy, minval=0, maxval=50, inline="s3_kd_val")

use_macd_entry = input.bool(false, "使用 MACD 進場 (Use MACD Entry)", group = group_strategy, inline="s4_macd")

adx_min_strength = input.int(20, "ADX 最小趨勢強度 (ADX Min Trend Strength)", group = group_strategy, minval=0, inline="s5_adx")

// Volume Confirmation
use_volume_confirmation = input.bool(false, "使用成交量確認 (Use Volume Confirmation)", group = group_strategy, inline="s6_vol")
volume_conf_type = input.string("大於均量 (Above MA)", "成交量確認類型 (Vol Conf Type)", options=["大於均量 (Above MA)", "均量倍數 (MA Multiple)"], group=group_strategy, inline="s6_vol_type", tooltip="僅在啟用成交量確認時有效")
volume_ma_len = input.int(20, "成交量均線長度 (Volume MA Length)", group = group_strategy, minval=1, tooltip = "僅在啟用成交量確認時有效 (Only effective if Volume Confirmation is enabled)", inline="s6_vol_len")
volume_multiple = input.float(1.5, "成交量倍數 (Volume Multiple)", group=group_strategy, minval=1.0, step=0.1, inline="s6_vol_len", tooltip="僅在選擇 '均量倍數' 類型時有效")

// SL/TP Settings
atr_period = input.int(14, "ATR 週期 (ATR Period)", group = group_strategy, minval=1, inline="sl_tp_atr")
atr_val = ta.atr(atr_period)

use_sl = input.bool(true, "使用停損 (Use Stop Loss)", group = group_strategy, inline="sl")
sl_atr_mult = input.float(2.0, "停損 ATR 倍數 (SL ATR Multiplier)", group = group_strategy, minval=0.1, inline="sl")

use_tp = input.bool(true, "使用停利 (Use Take Profit)", group = group_strategy, inline="tp")
tp_atr_mult = input.float(3.0, "停利 ATR 倍數 (TP ATR Multiplier)", group = group_strategy, minval=0.1, inline="tp")

// Backtesting Period
testPeriodStart = input.time(timestamp("01 Jan 2020 00:00 +0000"), "開始回測時間 (Backtest Start Time)", group = group_strategy)
testPeriodEnd = input.time(timestamp("01 Jan 2024 00:00 +0000"), "結束回測時間 (Backtest End Time)", group = group_strategy)

// ————— Machine Learning Inspired Settings —————
group_ml = "機器學習設定 (Machine Learning Settings)"
use_ml_logic = input.bool(false, "啟用機器學習邏輯 (Enable ML Logic)", group = group_ml, inline="ml0")

ml_long_entry_threshold = input.float(2.5, "ML 多頭進場閾值 (ML Long Score Threshold)", group = group_ml, minval=0, step=0.1, inline="ml0_long_thresh", tooltip="Minimum score for ML long entry.")
ml_short_entry_threshold = input.float(2.5, "ML 空頭進場閾值 (ML Short Score Threshold)", group = group_ml, minval=0, step=0.1, inline="ml0_short_thresh", tooltip="Minimum score for ML short entry.")

ml_weight_ma_long = input.float(1.0, "MA 多頭權重 (MA Long W.)", group = group_ml, minval=0, step=0.1, inline="ml1_long")
ml_weight_dmi_long = input.float(1.0, "DMI 多頭權重 (DMI Long W.)", group = group_ml, minval=0, step=0.1, inline="ml1_long")
ml_weight_rsi_long = input.float(1.0, "RSI 多頭權重 (RSI Long W.)", group = group_ml, minval=0, step=0.1, inline="ml2_long")
ml_weight_kd_long = input.float(0.5, "KD 多頭權重 (KD Long W.)", group = group_ml, minval=0, step=0.1, inline="ml2_long")
ml_weight_macd_long = input.float(0.5, "MACD 多頭權重 (MACD Long W.)", group = group_ml, minval=0, step=0.1, inline="ml3_long")

ml_weight_ma_short = input.float(1.0, "MA 空頭權重 (MA Short W.)", group = group_ml, minval=0, step=0.1, inline="ml1_short")
ml_weight_dmi_short = input.float(1.0, "DMI 空頭權重 (DMI Short W.)", group = group_ml, minval=0, step=0.1, inline="ml1_short")
ml_weight_rsi_short = input.float(1.0, "RSI 空頭權重 (RSI Short W.)", group = group_ml, minval=0, step=0.1, inline="ml2_short")
ml_weight_kd_short = input.float(0.5, "KD 空頭權重 (KD Short W.)", group = group_ml, minval=0, step=0.1, inline="ml2_short")
ml_weight_macd_short = input.float(0.5, "MACD 空頭權重 (MACD Short W.)", group = group_ml, minval=0, step=0.1, inline="ml3_short")
use_volume_in_ml_score = input.bool(false, "成交量納入ML評分 (Volume in ML Score)", group = group_ml, inline="ml4_vol", tooltip="若啟用，成交量確認將作為ML評分項，而非最終過濾器")
ml_weight_volume_long = input.float(0.5, "成交量多頭權重 (Vol Long W.)", group = group_ml, minval=0, step=0.1, inline="ml4_vol_w")
ml_weight_volume_short = input.float(0.5, "成交量空頭權重 (Vol Short W.)", group = group_ml, minval=0, step=0.1, inline="ml4_vol_w")

// --- Debugging ML Logic Inputs ---
is_ml_debug_on = input.bool(false, "啟用ML調試繪圖 (Enable ML Debug Plots)", group = group_ml, inline="ml_debug_toggle")

// Function to assist in ML debugging label
f_bool_to_str(val) => val ? "T" : "F"

// ————— Entry Conditions Logic —————
timeWindow = time >= testPeriodStart and time <= testPeriodEnd or (testPeriodStart == testPeriodEnd) // If start=end, assume full history

// --- Original Logic Components ---
// Long Entry Conditions
long_ma_ok = not use_ma_filter or (close > ma_val and ma_val > ma_val[1])
long_dmi_ok = not use_dmi_filter or (adx_val > adx_min_strength and di_plus > di_minus)

rsi_long_signal = use_rsi_entry and ta.crossover(rsi_val, rsi_entry_os) and barstate.isconfirmed
kd_long_signal = use_kd_entry and (slow_k < kd_entry_os and ta.crossover(slow_k, slow_d)) and barstate.isconfirmed
macd_long_signal = use_macd_entry and ta.crossover(macd_line, macd_signal_line) and barstate.isconfirmed

long_oscillator_fired = (use_rsi_entry and rsi_long_signal) or
                         (use_kd_entry and kd_long_signal) or
                         (use_macd_entry and macd_long_signal)
long_oscillator_active = use_rsi_entry or use_kd_entry or use_macd_entry
long_oscillator_condition_met = not long_oscillator_active or long_oscillator_fired

// Short Entry Conditions
short_ma_ok = not use_ma_filter or (close < ma_val and ma_val < ma_val[1])
short_dmi_ok = not use_dmi_filter or (adx_val > adx_min_strength and di_minus > di_plus)

rsi_short_signal = use_rsi_entry and ta.crossunder(rsi_val, rsi_entry_ob) and barstate.isconfirmed
kd_short_signal = use_kd_entry and (slow_k > kd_entry_ob and ta.crossunder(slow_k, slow_d)) and barstate.isconfirmed
macd_short_signal = use_macd_entry and ta.crossunder(macd_line, macd_signal_line) and barstate.isconfirmed

short_oscillator_fired = (use_rsi_entry and rsi_short_signal) or
                          (use_kd_entry and kd_short_signal) or
                          (use_macd_entry and macd_short_signal)
short_oscillator_active = use_rsi_entry or use_kd_entry or use_macd_entry
short_oscillator_condition_met = not short_oscillator_active or short_oscillator_fired

// Volume Confirmation Logic
avg_volume = ta.sma(volume, volume_ma_len)

volume_condition_met = false
if volume_conf_type == "大於均量 (Above MA)"
    volume_condition_met := volume > avg_volume
else if volume_conf_type == "均量倍數 (MA Multiple)"
    volume_condition_met := volume > avg_volume * volume_multiple

volume_confirms_trade = not use_volume_confirmation or volume_condition_met

// --- Machine Learning Inspired Score Calculation ---
// Note: This "ML" logic is a simplified weighted scoring system.
// It combines signals from various indicators, allowing users to assign weights
// to each signal. An entry is triggered if the combined weighted score
// exceeds a user-defined threshold. This is not a traditional ML model
// (like a neural network) but provides a framework for more nuanced signal combination.

ml_long_score = 0.0
ml_short_score = 0.0

// Variables for ML debug label - must be declared before the label and calculated before use in label
var string ma_trend_up_raw_str = "N/A"
var string dmi_trend_up_raw_str = "N/A"
var string rsi_long_signal_str = "N/A"
var string kd_long_signal_str = "N/A"
var string macd_long_signal_str = "N/A"
var string volume_signal_str = "N/A" // For ML debug

if use_ml_logic
    // MA contribution
    ma_trend_up_raw = close > ma_val and ma_val > ma_val[1]
    ma_trend_down_raw = close < ma_val and ma_val < ma_val[1]
    ma_trend_up_raw_str := f_bool_to_str(use_ma_filter and ma_trend_up_raw)
    if use_ma_filter        
        ml_long_score += (ma_trend_up_raw ? 1 : 0) * ml_weight_ma_long
        ml_short_score += (ma_trend_down_raw ? 1 : 0) * ml_weight_ma_short

    // DMI contribution
    dmi_trend_up_raw = adx_val > adx_min_strength and di_plus > di_minus
    dmi_trend_down_raw = adx_val > adx_min_strength and di_minus > di_plus
    dmi_trend_up_raw_str := f_bool_to_str(use_dmi_filter and dmi_trend_up_raw)
    dmi_trend_up_raw_str := f_bool_to_str(use_dmi_filter and dmi_trend_up_raw)
    if use_dmi_filter
        ml_long_score += (dmi_trend_up_raw ? 1 : 0) * ml_weight_dmi_long
        ml_short_score += (dmi_trend_down_raw ? 1 : 0) * ml_weight_dmi_short

    // RSI contribution (rsi_long_signal already checks use_rsi_entry and barstate.isconfirmed)
    rsi_long_signal_str := f_bool_to_str(rsi_long_signal)
    ml_long_score += (rsi_long_signal ? 1 : 0) * ml_weight_rsi_long
    ml_short_score += (rsi_short_signal ? 1 : 0) * ml_weight_rsi_short

    // KD contribution (kd_long_signal already checks use_kd_entry and barstate.isconfirmed)
    kd_long_signal_str := f_bool_to_str(kd_long_signal)
    ml_long_score += (kd_long_signal ? 1 : 0) * ml_weight_kd_long
    ml_short_score += (kd_short_signal ? 1 : 0) * ml_weight_kd_short

    // MACD contribution (macd_long_signal already checks use_macd_entry and barstate.isconfirmed)
    macd_long_signal_str := f_bool_to_str(macd_long_signal)
    ml_long_score += (macd_long_signal ? 1 : 0) * ml_weight_macd_long
    ml_short_score += (macd_short_signal ? 1 : 0) * ml_weight_macd_short

    // Volume contribution to ML score (if enabled)
    volume_signal_str := f_bool_to_str(volume_condition_met)
    if use_volume_in_ml_score and use_volume_confirmation // Only add to score if main vol confirmation is on AND vol in ML is on
        ml_long_score += (volume_condition_met ? 1 : 0) * ml_weight_volume_long
        ml_short_score += (volume_condition_met ? 1 : 0) * ml_weight_volume_short

// Plot ML scores for data window and shapes for visual confirmation on chart
plot(use_ml_logic and is_ml_debug_on ? ml_long_score : na, title="ML Long Score (Debug)", color=color.new(color.teal,0), display=display.data_window)
plot(use_ml_logic and is_ml_debug_on ? ml_short_score : na, title="ML Short Score (Debug)", color=color.new(color.orange,0), display=display.data_window)

// Plot ML scores and component statuses for debugging if enabled
// This is placed AFTER ml_long_score and other components are calculated
if use_ml_logic and is_ml_debug_on and barstate.islastconfirmedhistory 
    debug_text_long = "ML Scores (L):\n" +
      "LScore: " + str.tostring(ml_long_score, "#.##") + " (Th:" + str.tostring(ml_long_entry_threshold) + ")\n" +
      "MA(" + f_bool_to_str(use_ma_filter) + "):" + ma_trend_up_raw_str + "\n" +
      "DMI(" + f_bool_to_str(use_dmi_filter) + "):" + dmi_trend_up_raw_str + "\n" +
      "RSI(" + f_bool_to_str(use_rsi_entry) + "):" + rsi_long_signal_str + "\n" +
      "KD(" + f_bool_to_str(use_kd_entry) + "):" + kd_long_signal_str + "\n" +
      "MACD(" + f_bool_to_str(use_macd_entry) + "):" + macd_long_signal_str + "\n" +
      (use_volume_in_ml_score and use_volume_confirmation ? "Vol(" + f_bool_to_str(use_volume_confirmation) + "):" + volume_signal_str : "") // Show Vol in debug only if active in ML
    label.new(bar_index, high + atr_val * 1, debug_text_long, // Use atr_val
              color=color.new(color.blue, 20), textcolor=color.white, style=label.style_label_left, yloc=yloc.price, textalign=text.align_left, size=size.small)

// --- Final Entry Conditions ---
base_long_signal = false
if use_ml_logic
    base_long_signal := (ml_long_score >= ml_long_entry_threshold) and barstate.isconfirmed
else
    base_long_signal := long_ma_ok and long_dmi_ok and long_oscillator_condition_met

base_short_signal = false
if use_ml_logic
    base_short_signal := (ml_short_score >= ml_short_entry_threshold) and barstate.isconfirmed
else
    base_short_signal := short_ma_ok and short_dmi_ok and short_oscillator_condition_met

// Apply volume confirmation:
// If volume is part of ML score, it's already included.
// If not, apply it as a final filter.
final_volume_confirms_long = use_volume_in_ml_score ? true : volume_confirms_trade // If in ML, assume confirmed, else check
final_volume_confirms_short = use_volume_in_ml_score ? true : volume_confirms_trade

longCondition = (trade_direction == "多空都做" or trade_direction == "只做多") and
                 timeWindow and base_long_signal and final_volume_confirms_long

shortCondition = (trade_direction == "多空都做" or trade_direction == "只做空") and
                  timeWindow and base_short_signal and final_volume_confirms_short

// ————— Strategy Execution —————

if longCondition and strategy.position_size == 0
    strategy.entry("買進 (L)", strategy.long)

if shortCondition and strategy.position_size == 0
    strategy.entry("賣出 (S)", strategy.short)

// Exit Logic (Stop Loss and Take Profit)
long_sl_price = strategy.position_avg_price - atr_val * sl_atr_mult
long_tp_price = strategy.position_avg_price + atr_val * tp_atr_mult

short_sl_price = strategy.position_avg_price + atr_val * sl_atr_mult
short_tp_price = strategy.position_avg_price - atr_val * tp_atr_mult

if strategy.position_size > 0 // If long position is active
    strategy.exit("多單出場", from_entry = "買進 (L)", stop = use_sl ? long_sl_price : na, limit = use_tp ? long_tp_price : na)

if strategy.position_size < 0 // If short position is active
    strategy.exit("空單出場", from_entry = "賣出 (S)", stop = use_sl ? short_sl_price : na, limit = use_tp ? short_tp_price : na)

// ————— Plotting Extras (Entry, TP, Warnings) —————
group_plotting_extras = "額外繪圖設定 (Extra Plotting Settings)"
show_entry_sl_tp_plots = input.bool(false, "繪製進場價與預期停損/利目標 (Plot Entry & SL/TP)", group = group_plotting_extras, inline="plot_etp1")
use_ml_warning_alerts = input.bool(false, "啟用ML進場觀察提醒 (Enable ML Pre-Entry Alerts)", group = group_plotting_extras, inline="plot_mlwarn1")
ml_warning_threshold_pct = input.float(0.80, "ML提醒閾值百分比 (ML Alert Threshold %)", minval=0.1, maxval=0.99, step=0.05, group = group_plotting_extras, inline="plot_mlwarn2", tooltip="當ML分數達到進場閾值的此百分比時提醒 (e.g., 0.8 = 80%)")

// Variables for plotting entry and TP lines
var float plotted_trade_entry_price = na
var float plotted_trade_sl_price = na
var float plotted_trade_tp_price = na
var color plotted_trade_line_color = color.new(color.black, 100) 
var label sl_label = na // Label for Stop Loss price
var label tp_label = na // Label for Take Profit price
var int min_contributors_for_ml_warning = input.int(2, "ML提醒最少貢獻指標數", minval=1, maxval=5, group=group_plotting_extras, inline="plot_mlwarn2", tooltip="ML觀察提醒至少需要多少個指標貢獻分數")


// Capture entry and TP on new trade
is_new_trade = strategy.opentrades > strategy.opentrades[1]

if is_new_trade // New trade opened
    current_atr_at_entry = atr_val[1] // ATR of the bar before entry signal confirmation. Use globally calculated atr_val.
    if strategy.position_size > 0 // Long trade
        plotted_trade_entry_price := strategy.position_avg_price
        plotted_trade_sl_price := plotted_trade_entry_price - current_atr_at_entry * sl_atr_mult
        plotted_trade_tp_price := plotted_trade_entry_price + current_atr_at_entry * tp_atr_mult
        plotted_trade_line_color := color.green
        if show_entry_sl_tp_plots
            label.delete(sl_label)
            label.delete(tp_label)
            if use_sl
                sl_label := label.new(bar_index + 1, plotted_trade_sl_price, "停損: " + str.tostring(plotted_trade_sl_price, format.mintick), xloc=xloc.bar_index, yloc=yloc.price, color=color.new(color.maroon, 20), textcolor=color.white, style=label.style_label_right, size=size.tiny)
            if use_tp
                tp_label := label.new(bar_index + 1, plotted_trade_tp_price, "停利: " + str.tostring(plotted_trade_tp_price, format.mintick), xloc=xloc.bar_index, yloc=yloc.price, color=color.new(color.teal, 20), textcolor=color.white, style=label.style_label_right, size=size.tiny)
    else if strategy.position_size < 0 // Short trade
        plotted_trade_entry_price := strategy.position_avg_price
        plotted_trade_sl_price := plotted_trade_entry_price + current_atr_at_entry * sl_atr_mult
        plotted_trade_tp_price := plotted_trade_entry_price - current_atr_at_entry * tp_atr_mult
        plotted_trade_line_color := color.red
        if show_entry_sl_tp_plots
            label.delete(sl_label)
            label.delete(tp_label)
            if use_sl
                sl_label := label.new(bar_index + 1, plotted_trade_sl_price, "停損: " + str.tostring(plotted_trade_sl_price, format.mintick), xloc=xloc.bar_index, yloc=yloc.price, color=color.new(color.maroon, 20), textcolor=color.white, style=label.style_label_right, size=size.tiny)
            if use_tp
                tp_label := label.new(bar_index + 1, plotted_trade_tp_price, "停利: " + str.tostring(plotted_trade_tp_price, format.mintick), xloc=xloc.bar_index, yloc=yloc.price, color=color.new(color.teal, 20), textcolor=color.white, style=label.style_label_right, size=size.tiny)

// Reset when flat
if strategy.opentrades == 0 and strategy.opentrades[1] > 0 // All trades closed in the previous bar
    plotted_trade_entry_price := na
    plotted_trade_sl_price := na
    plotted_trade_tp_price := na
    label.delete(sl_label)
    label.delete(tp_label)

// Plot entry price and fixed TP target lines
plot(show_entry_sl_tp_plots ? plotted_trade_entry_price : na, title="進場價位 (Entry Price Line)", color=plotted_trade_line_color, style=plot.style_linebr, linewidth=1, display=display.all)
plot(show_entry_sl_tp_plots and use_sl ? plotted_trade_sl_price : na, title="預期停損目標 (SL Target Line)", color=color.new(plotted_trade_line_color, 60), style=plot.style_linebr, linewidth=1, display=display.all) // Removed linestyle, made color more transparent
plot(show_entry_sl_tp_plots and use_tp ? plotted_trade_tp_price : na, title="預期停利目標 (TP Target Line)", color=plotted_trade_line_color, style=plot.style_linebr, linewidth=1, display=display.all)

// Plot labels for actual entry
// Pre-calculate text for entry labels as series strings
if (is_new_trade and strategy.position_size > 0)
    long_entry_text = "買進\n@" + str.tostring(strategy.position_avg_price, format.mintick)
    label.new(bar_index, low, text=long_entry_text,
              yloc=yloc.price, style=label.style_label_up,
              color=color.new(color.green,0), textcolor=color.white, size=size.small)

if (is_new_trade and strategy.position_size < 0)
    short_entry_text = "賣出\n@" + str.tostring(strategy.position_avg_price, format.mintick)
    label.new(bar_index, high, text=short_entry_text,
              yloc=yloc.price, style=label.style_label_down,
              color=color.new(color.red,0), textcolor=color.white, size=size.small)

// Plot labels for actual exit
just_closed_long = strategy.position_size == 0 and strategy.position_size[1] > 0
just_closed_short = strategy.position_size == 0 and strategy.position_size[1] < 0
exit_price_for_label = close // Approximation for exit plotshape

if (just_closed_long)
    long_exit_text = "多平\n@" + str.tostring(exit_price_for_label, format.mintick)
    label.new(bar_index, high, text=long_exit_text,
              yloc=yloc.price, style=label.style_label_down,
              color=color.new(color.blue, 70), textcolor=color.white, size=size.small)

if (just_closed_short)
    short_exit_text = "空平\n@" + str.tostring(exit_price_for_label, format.mintick)
    label.new(bar_index, low, text=short_exit_text,
              yloc=yloc.price, style=label.style_label_up,
              color=color.new(color.purple, 70), textcolor=color.white, size=size.small)

// ML Pre-Signal Warnings
is_approaching_long_ml = use_ml_logic and (ml_long_score >= ml_long_entry_threshold * ml_warning_threshold_pct) and (ml_long_score < ml_long_entry_threshold) and barstate.isconfirmed
is_approaching_short_ml = use_ml_logic and (ml_short_score >= ml_short_entry_threshold * ml_warning_threshold_pct) and (ml_short_score < ml_short_entry_threshold) and barstate.isconfirmed
plotshape(use_ml_warning_alerts and is_approaching_long_ml and strategy.position_size == 0, title="ML多頭觀察提醒 (ML Long Watch)", location=location.bottom, color=color.new(color.aqua, 50), style=shape.diamond, size=size.tiny, text="多?") // Changed text to Chinese
plotshape(use_ml_warning_alerts and is_approaching_short_ml and strategy.position_size == 0, title="ML空頭觀察提醒 (ML Short Watch)", location=location.top, color=color.new(color.fuchsia, 50), style=shape.diamond, size=size.tiny, text="空?") // Changed text to Chinese

// ————————————————————————————————————————————————————————————————————————————————————————————————————
// 指標使用說明 (Indicator Usage Notes):
//
// 1. KD (隨機指標), MACD (指數平滑異同移動平均線), RSI (相對強弱指標):
//    - 主要用於判斷市場是否處於超買或超賣狀態。
//    - 觀察指標的背離現象 (價格創新高/低，但指標未同步)，可能預示趨勢反轉。
//    - MACD 的黃金交叉 (MACD線由下往上穿越訊號線) 和死亡交叉 (MACD線由上往下穿越訊號線) 可作為買賣參考。
//    - RSI 和 KD 進入超買區 (如 RSI > 70, KD > 80) 後回落，或進入超賣區 (如 RSI < 30, KD < 20) 後回升，可視為潛在訊號。
//
// 2. 布林通道 (Bollinger Bands), 移動平均線 (MA), DMI (趨向指標):
//    - MA 的方向指示趨勢 (例如，價格在MA之上且MA向上，為上升趨勢)。
//    - 布林通道的寬窄表示市場波動性大小。價格觸及上下軌可能意味著支撐或壓力。通道收窄 (squeeze) 後的擴張，常伴隨較大行情。
//    - DMI 中的 ADX 線用來衡量趨勢的強度。ADX 上升代表趨勢增強 (無論漲跌)，ADX 下降代表趨勢減弱或進入盤整。
//    - +DI 與 -DI 的交叉可作為趨勢方向改變的參考 (+DI 上穿 -DI 為多頭訊號，反之為空頭訊號)，需結合 ADX 強度判斷。
//
// 3. 機器學習設定 (Machine Learning Settings):
//    - 若啟用，策略將使用加權評分系統來決定進場。
//    - 您可以為每個指標訊號 (MA, DMI, RSI, KD, MACD) 設定不同的多頭和空頭權重。
//    - 只有當計算出的總分達到指定的「進場閾值」時，才會觸發交易。
//    - 此功能提供了一種更靈活的方式來組合多個指標的訊號強度。
//
// 注意:
// - 本指標組合提供技術分析數據，實際的買賣決策應結合其他分析方法、市場狀況及個人風險承受能力。
// - 您可以在指標設定中調整各項參數，並勾選/取消勾選「顯示...」來組合您想觀察的指標。
// ————————————————————————————————————————————————————————————————————————————————————————————————————